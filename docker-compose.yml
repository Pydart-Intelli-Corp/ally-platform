services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - HOSTNAME=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=docker
      - DATABASE_URL=mysql+pymysql://psrcloud:Access%40LRC2404@psrazuredb.mysql.database.azure.com:3306/ally-db?ssl_ca=/app/DigiCertGlobalRootCA.crt.pem&ssl_disabled=false
      - REDIS_URL=redis://redis:6379
      - MYSQL_HOST=psrazuredb.mysql.database.azure.com
      - MYSQL_PORT=3306
      - MYSQL_USER=psrcloud
      - MYSQL_PASSWORD=Access@LRC2404
      - MYSQL_DATABASE=ally-db
      - MYSQL_SSL_MODE=REQUIRED
      - ALEMBIC_SKIP_SSL=false
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge